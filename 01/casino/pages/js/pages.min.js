

!(function (e) {
    "use strict";
    var t = function () {
        (this.VERSION = "3.0.0"),
            (this.AUTHOR = "Revox"),
            (this.SUPPORT = "support@revox.io"),
            (this.pageScrollElement = "html, body"),
            (this.$body = e("body")),
            this.setUserOS(),
            this.setUserAgent();
    };
    (t.prototype.setUserOS = function () {
        var e = "";
        -1 != navigator.appVersion.indexOf("Win") && (e = "windows"),
            -1 != navigator.appVersion.indexOf("Mac") && (e = "mac"),
            -1 != navigator.appVersion.indexOf("X11") && (e = "unix"),
            -1 != navigator.appVersion.indexOf("Linux") && (e = "linux"),
            this.$body.addClass(e);
    }),
        (t.prototype.setUserAgent = function () {
            navigator.userAgent.match(/Android|BlackBerry|iPhone|iPad|iPod|Opera Mini|IEMobile/i)
                ? this.$body.addClass("mobile")
                : (this.$body.addClass("desktop"),
                    navigator.userAgent.match(/MSIE 9.0/) && this.$body.addClass("ie9"));
        }),
        (t.prototype.isVisibleXs = function () {
            return (
                !e("#pg-visible-xs").length &&
                this.$body.append('<div id="pg-visible-xs" class="visible-xs" />'),
                e("#pg-visible-xs").is(":visible")
            );
        }),
        (t.prototype.isVisibleSm = function () {
            return (
                !e("#pg-visible-sm").length &&
                this.$body.append('<div id="pg-visible-sm" class="visible-sm" />'),
                e("#pg-visible-sm").is(":visible")
            );
        }),
        (t.prototype.isVisibleMd = function () {
            return (
                !e("#pg-visible-md").length &&
                this.$body.append('<div id="pg-visible-md" class="visible-md" />'),
                e("#pg-visible-md").is(":visible")
            );
        }),
        (t.prototype.isVisibleLg = function () {
            return (
                !e("#pg-visible-lg").length &&
                this.$body.append('<div id="pg-visible-lg" class="visible-lg" />'),
                e("#pg-visible-lg").is(":visible")
            );
        }),
        (t.prototype.getUserAgent = function () {
            return e("body").hasClass("mobile") ? "mobile" : "desktop";
        }),
        (t.prototype.setFullScreen = function (e) {
            var t =
                e.requestFullScreen ||
                e.webkitRequestFullScreen ||
                e.mozRequestFullScreen ||
                e.msRequestFullscreen;
            if (t) t.call(e);
            else if (void 0 !== window.ActiveXObject) {
                var i = new ActiveXObject("WScript.Shell");
                null !== i && i.SendKeys("{F11}");
            }
        }),
        (t.prototype.getColor = function (t, i) {
            i = parseFloat(i) || 1;
            var s = e(".pg-colors").length
                ? e(".pg-colors")
                : e('<div class="pg-colors"></div>').appendTo("body"),
                n = (t = (
                    s.find('[data-color="' + t + '"]').length
                        ? s.find('[data-color="' + t + '"]')
                        : e('<div class="bg-' + t + '" data-color="' + t + '"></div>').appendTo(s)
                ).css("background-color")).match(/^rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
            return "rgba(" + n[1] + ", " + n[2] + ", " + n[3] + ", " + i + ")";
        }),
        (t.prototype.initSidebar = function (t) {
            e('[data-pages="sidebar"]', t).each(function () {
                var t = e(this);
                t.sidebar(t.data());
            });
        }),
        (t.prototype.initDropDown = function (t) {
            e(".dropdown-default", t).each(function () {
                var t = e(this).find(".dropdown-menu").siblings(".dropdown-toggle"),
                    i = e(this).find(".dropdown-menu").actual("outerWidth");
                t.actual("outerWidth") < i
                    ? (t.width(i - 0), e(this).find(".dropdown-menu").width(t.actual("outerWidth")))
                    : e(this).find(".dropdown-menu").width(t.actual("outerWidth"));
            });
        }),
        (t.prototype.initFormGroupDefault = function (t) {
            e(".form-group.form-group-default", t).click(function () {
                e(this).find("input").focus();
            }),
                this.initFormGroupDefaultRun ||
                (e("body").on("focus", ".form-group.form-group-default :input", function () {
                    e(".form-group.form-group-default").removeClass("focused"),
                        e(this).parents(".form-group").addClass("focused");
                }),
                    e("body").on("blur", ".form-group.form-group-default :input", function () {
                        e(this).parents(".form-group").removeClass("focused"),
                            e(this).val()
                                ? e(this).closest(".form-group").find("label").addClass("fade")
                                : e(this).closest(".form-group").find("label").removeClass("fade");
                    }),
                    (this.initFormGroupDefaultRun = !0)),
                e(".form-group.form-group-default .checkbox, .form-group.form-group-default .radio", t).hover(
                    function () {
                        e(this).parents(".form-group").addClass("focused");
                    },
                    function () {
                        e(this).parents(".form-group").removeClass("focused");
                    }
                );
        }),
        (t.prototype.initSlidingTabs = function (t) {
            e('a[data-toggle="tab"]', t).on("show.bs.tab", function (t) {
                var i = (t = e(t.target).parent().find("a[data-toggle=tab]")).data("target");
                void 0 === i && (i = t.attr("href")),
                    e(i).is(".slide-left, .slide-right") &&
                    (e(i).addClass("sliding"),
                        setTimeout(function () {
                            e(i).removeClass("sliding");
                        }, 100));
            });
        }),
        (t.prototype.reponsiveTabs = function () {
            e('[data-init-reponsive-tabs="dropdownfx"]').each(function () {
                var t = e(this);
                t.addClass("hidden-sm-down");
                for (
                    var i =
                        '<select class="cs-select cs-skin-slide full-width" data-init-plugin="cs-select">',
                    s = 1;
                    s <= t.children("li").length;
                    s++
                ) {
                    var n = t.children("li:nth-child(" + s + ")"),
                        o = "";
                    n.children("a").hasClass("active") && (o = "selected");
                    var a = n.children("a").attr("href");
                    "#" == a && (a = n.children("a").attr("data-target")),
                        (i += '<option value="' + a + '" ' + o + ">"),
                        (i += n.children("a").text()),
                        (i += "</option>");
                }
                (i += "</select>"), t.after(i);
                var r = t.next()[0];
                e(r).on("change", function (i) {
                    e("option:selected", this);
                    var s = this.value,
                        n = t.find('a[data-target="' + s + '"]');
                    0 == n.length && (n = t.find('a[data-target="' + s + '"]')), n.tab("show");
                }),
                    e(r).wrap('<div class="nav-tab-dropdown cs-wrapper full-width hidden-md-up"></div>'),
                    new SelectFx(r);
            });
        }),
        (t.prototype.initNotificationCenter = function () {
            e("body").on("click", ".notification-list .dropdown-menu", function (e) {
                e.stopPropagation();
            }),
                e("body").on("click", ".toggle-more-details", function (t) {
                    var i = e(this).closest(".heading");
                    i.closest(".heading")
                        .children(".more-details")
                        .stop()
                        .slideToggle("fast", function () {
                            i.toggleClass("open");
                        });
                });
        }),
        (t.prototype.initProgressBars = function () {
            e(window).on("load", function () {
                e(".progress-bar-indeterminate, .progress-circle-indeterminate, .mapplic-pin").hide().show(0);
            });
        }),
        (t.prototype.initInputFile = function () {
            e(document).on("change", ".btn-file :file", function () {
                var t = e(this),
                    i = t.get(0).files ? t.get(0).files.length : 1,
                    s = t.val().replace(/\\/g, "/").replace(/.*\//, "");
                t.trigger("fileselect", [i, s]);
            }),
                e(".btn-file :file").on("fileselect", function (t, i, s) {
                    var n = e(this).parents(".input-group").find(":text"),
                        o = i > 1 ? i + " files selected" : s;
                    n.length ? n.val(o) : e(this).parent().html(o);
                });
        }),
        (t.prototype.initHorizontalMenu = function () {
            function t() {
                var t = e("[data-pages-init='horizontal-menu']"),
                    i = parseInt(t.data("hideExtraLi")) || 0;
                if (0 != t.length) {
                    var s = t[0].getBoundingClientRect(),
                        n = 0,
                        o = 0;
                    if (
                        (t.children("ul").children("li.more").remove(),
                            t
                                .children("ul")
                                .children("li")
                                .each(function (t) {
                                    e(this).removeAttr("style"), (n += e(this).outerWidth(!0)), o++;
                                }),
                            !(e(window).width() < 992))
                    ) {
                        var a = parseInt(s.width / (n / o)) - 1;
                        if (o > (a -= i))
                            for (
                                var r = (function (e) {
                                    return (
                                        e
                                            .children("ul")
                                            .append(
                                                "<li class='more'><a href='javascript:;'><span class='title'><i class='pg pg-more'></i></span></a><ul></ul></li>"
                                            ),
                                        e.children("ul").children("li.more")
                                    );
                                })(t),
                                l = a;
                                l < o;
                                l++
                            ) {
                                var c = t.children("ul").children("li").eq(l),
                                    d = c.clone();
                                d.children("ul").addClass("sub-menu"), r.children("ul").append(d), c.hide();
                            }
                    }
                }
            }
            var i, s;
            e("[data-pages-init='horizontal-menu']"),
                t(),
                e(document).on("click", ".menu-bar > ul > li", function () {
                    if (0 != e(this).children("ul").length)
                        if (e(window).width() < 992) {
                            var t = e(".menu-bar"),
                                s = e(this),
                                n = (t.find("li"), e(this).children("ul"));
                            s.hasClass("open active")
                                ? (s.find(".arrow").removeClass("open active"),
                                    n.slideUp(200, function () {
                                        s.removeClass("open active");
                                    }))
                                : (t.find("li.open").find("ul").slideUp(200),
                                    t.find("li.open").find("a").find(".arrow").removeClass("open active"),
                                    t.find("li.open").removeClass("open active"),
                                    s.find(".arrow").addClass("open active"),
                                    n.slideDown(200, function () {
                                        s.addClass("open active");
                                    }));
                        } else
                            e(this).hasClass("opening")
                                ? (function (t) {
                                    var s = e(t.children("ul")[0]),
                                        n = e("<div class='ghost-nav-dropdown'></div>");
                                    if (0 != s.length) {
                                        var o = s[0].getBoundingClientRect();
                                        n.css({
                                            width: o.width + "px",
                                            height: o.height + "px",
                                            "z-index": "auto",
                                        }),
                                            t.append(n);
                                        var a = s.children("li").css("transition-duration");
                                        (a = parseInt(1e3 * parseFloat(a))),
                                            t.addClass("closing"),
                                            window.clearTimeout(i),
                                            (i = window.setTimeout(function () {
                                                n.height(0), t.removeClass("open opening closing");
                                            }, a - 80));
                                    }
                                })(e(this))
                                : (function (t) {
                                    var s = e(t.children("ul")[0]),
                                        n = e("<div class='ghost-nav-dropdown'></div>");
                                    if (
                                        (t.children(".ghost-nav-dropdown").remove(),
                                            t.addClass("open").siblings().removeClass("open opening"),
                                            0 != s.length)
                                    ) {
                                        var o = s[0].getBoundingClientRect();
                                        n.css({ width: o.width + "px", height: "0px" }),
                                            t.append(n),
                                            n.height(o.height);
                                        var a = n.css("transition-duration");
                                        (a = parseInt(1e3 * parseFloat(a))),
                                            window.clearTimeout(i),
                                            (i = window.setTimeout(function () {
                                                t.addClass("opening"), n.remove();
                                            }, a));
                                    }
                                })(e(this));
                }),
                e(window).on("resize", function (e) {
                    clearTimeout(s),
                        (s = setTimeout(function () {
                            t();
                        }, 250));
                }),
                e(".content").on("click", function () {
                    e(".horizontal-menu .bar-inner > ul > li").removeClass("open"),
                        e(".menu-bar > ul > li")
                            .removeClass("open opening")
                            .children("ul")
                            .removeAttr("style"),
                        e("body").find(".ghost-nav-dropdown").remove();
                }),
                e('[data-toggle="horizontal-menu"]').on("click touchstart", function (t) {
                    t.preventDefault(),
                        e("body").toggleClass("horizontal-menu-open"),
                        e(".horizontal-menu-backdrop").length
                            ? e(".horizontal-menu-backdrop").fadeToggle("fast", function () {
                                e(this).remove();
                            })
                            : (e(".header").append('<div class="horizontal-menu-backdrop"/>'),
                                e(".horizontal-menu-backdrop").fadeToggle("fast")),
                        e(".menu-bar").toggleClass("open");
                });
        }),
        (t.prototype.initTooltipPlugin = function (t) {
            e.fn.tooltip && e('[data-toggle="tooltip"]', t).tooltip();
        }),
        (t.prototype.initSelect2Plugin = function (t) {
            e.fn.select2 &&
                e('[data-init-plugin="select2"]', t).each(function () {
                    e(this)
                        .select2({
                            minimumResultsForSearch: "true" == e(this).attr("data-disable-search") ? -1 : 1,
                        })
                        .on("select2:open", function () {
                            e.fn.scrollbar && e(".select2-results__options").scrollbar({ ignoreMobile: !1 });
                        });
                });
        }),
        (t.prototype.initScrollBarPlugin = function (t) {
            e.fn.scrollbar && e(".scrollable", t).scrollbar({ ignoreOverlay: !1 });
        }),
        (t.prototype.initListView = function (t) {
            e.fn.ioslist && e('[data-init-list-view="ioslist"]', t).ioslist(),
                e.fn.scrollbar && e(".list-view-wrapper", t).scrollbar({ ignoreOverlay: !1 });
        }),
        (t.prototype.initSwitcheryPlugin = function (t) {
            window.Switchery &&
                e('[data-init-plugin="switchery"]', t).each(function () {
                    var t = e(this);
                    new Switchery(t.get(0), {
                        color:
                            null != t.data("color")
                                ? e.Pages.getColor(t.data("color"))
                                : e.Pages.getColor("success"),
                        size: null != t.data("size") ? t.data("size") : "default",
                    });
                });
        }),
        (t.prototype.initSelectFxPlugin = function (t) {
            window.SelectFx &&
                e('select[data-init-plugin="cs-select"]', t).each(function () {
                    var t = e(this).get(0);
                    e(t).wrap('<div class="cs-wrapper"></div>'), new SelectFx(t);
                });
        }),
        (t.prototype.initUnveilPlugin = function (t) {
            e.fn.unveil && e("img", t).unveil();
        }),
        (t.prototype.initValidatorPlugin = function () {
            e.validator &&
                e.validator.setDefaults({
                    ignore: "",
                    showErrors: function (t, i) {
                        var s = this;
                        return (
                            e.each(this.successList, function (t, i) {
                                if (e(this).closest(".form-group-attached").length)
                                    return e(i).popover("hide");
                            }),
                            e.each(i, function (t, i) {
                                var n = e(i.element).closest(".form-group-attached");
                                if (!n.length) return s.defaultShowErrors();
                                e(i.element).popover({
                                    trigger: "manual",
                                    placement: "top",
                                    html: !0,
                                    container: n.closest("form"),
                                    content: i.message,
                                }),
                                    (n = e(i.element).closest(".form-group")).addClass("has-error"),
                                    e(i.element).popover("show");
                            })
                        );
                    },
                    onfocusout: function (t) {
                        var i = e(t).closest(".form-group");
                        e(t).valid() && (i.removeClass("has-error"), i.next(".error").remove());
                    },
                    onkeyup: function (t) {
                        var i = e(t).closest(".form-group");
                        e(t).valid()
                            ? (e(t).removeClass("error"),
                                i.removeClass("has-error"),
                                i.next("label.error").remove(),
                                i.find("label.error").remove())
                            : i.addClass("has-error");
                    },
                    errorPlacement: function (t, i) {
                        var s = e(i).closest(".form-group");
                        s.hasClass("form-group-default")
                            ? (s.addClass("has-error"), t.insertAfter(s))
                            : t.insertAfter(i);
                    },
                });
        }),
        (t.prototype.setBackgroundImage = function () {
            e("[data-pages-bg-image]").each(function () {
                var t = e(this),
                    i = {
                        pagesBgImage: "",
                        lazyLoad: "true",
                        progressType: "",
                        progressColor: "",
                        bgOverlay: "",
                        bgOverlayClass: "",
                        overlayOpacity: 0,
                    },
                    s = t.data();
                e.extend(i, s);
                var n = i.pagesBgImage,
                    o = i.bgOverlay,
                    a = i.overlayOpacity,
                    r = e('<div class="bg-overlay"></div>');
                r.addClass(i.bgOverlayClass), r.css({ "background-color": o, opacity: 1 }), t.append(r);
                var l = new Image();
                (l.src = n),
                    (l.onload = function () {
                        t.css({ "background-image": "url(" + n + ")" }),
                            t.children(".bg-overlay").css({ opacity: a });
                    });
            });
        }),
        (t.prototype.secondarySidebar = function () {
            e('[data-init="secondary-sidebar"]').each(function () {
                e(this).on("click", ".main-menu li a", function (t) {
                    if (!1 !== e(this).parent().children(".sub-menu")) {
                        var i = e(this),
                            s = e(this).parent().parent(),
                            n = e(this).parent(),
                            o = e(this).parent().children(".sub-menu");
                        n.hasClass("open active")
                            ? (i.children(".arrow").removeClass("open active"),
                                o.slideUp(200, function () {
                                    n.removeClass("open active");
                                }))
                            : (s.children("li.open").children(".sub-menu").slideUp(200),
                                s
                                    .children("li.open")
                                    .children("a")
                                    .children(".arrow")
                                    .removeClass("open active"),
                                s.children("li.open").removeClass("open active"),
                                i.children(".arrow").addClass("open active"),
                                o.slideDown(200, function () {
                                    n.addClass("open active");
                                }));
                    }
                });
            }),
                e('[data-init="secondary-sidebar-toggle"]').each(function () {
                    e(this).on("click", function (t) {
                        var i = e(this).get(0).getBoundingClientRect(),
                            s = e('[data-init="secondary-sidebar"]');
                        if (s.hasClass("open")) s.removeClass("open"), s.removeAttr("style");
                        else {
                            s.addClass("open");
                            var n = s.get(0).getBoundingClientRect();
                            s.css({
                                top: i.bottom,
                                "max-height": e(window).height() - i.bottom,
                                left: e(window).width() / 2 - n.width / 2,
                                visibility: "visible",
                            });
                        }
                    });
                });
        }),
        (t.prototype.init = function () {
            this.initSidebar(),
                this.setBackgroundImage(),
                this.initDropDown(),
                this.initFormGroupDefault(),
                this.initSlidingTabs(),
                this.initNotificationCenter(),
                this.initProgressBars(),
                this.initHorizontalMenu(),
                this.initTooltipPlugin(),
                this.initSelect2Plugin(),
                this.initScrollBarPlugin(),
                this.initSwitcheryPlugin(),
                this.initSelectFxPlugin(),
                this.initUnveilPlugin(),
                this.initValidatorPlugin(),
                this.initListView(),
                this.initInputFile(),
                this.reponsiveTabs(),
                this.secondarySidebar();
        }),
        (e.Pages = new t()),
        (e.Pages.Constructor = t);
})(window.jQuery),
    (function (e) {
        "use strict";
        function t(e, t) {
            for (var i in t) t.hasOwnProperty(i) && (e[i] = t[i]);
            return e;
        }
        function i(e, i) {
            (this.el = e), (this.options = t({}, this.options)), t(this.options, i), this._init();
        }
        function s(e, t) {
            t.parentNode.insertBefore(e, t.nextSibling);
        }
        (i.prototype.options = {
            newTab: !0,
            stickyPlaceholder: !0,
            container: "body",
            onChange: function (e) {
                var t = document.createEvent("HTMLEvents");
                t.initEvent("change", !0, !1), e.dispatchEvent(t);
            },
        }),
            (i.prototype._init = function () {
                var e = document.querySelector("option[selected]");
                (this.hasDefaultPlaceholder = e && e.disabled),
                    (this.selectedOpt = e || this.el.querySelector("option")),
                    this._createSelectEl(),
                    (this.selOpts = [].slice.call(this.selEl.querySelectorAll("li[data-option]"))),
                    (this.selOptsCount = this.selOpts.length),
                    (this.current = this.selOpts.indexOf(this.selEl.querySelector("li.cs-selected")) || -1),
                    (this.selPlaceholder = this.selEl.querySelector("span.cs-placeholder")),
                    this._initEvents(),
                    (this.el.onchange = function () {
                        var e = this.selectedIndex;
                        this.children[e].innerHTML.trim();
                    });
            }),
            (i.prototype._createSelectEl = function () {
                var e = "",
                    t = function (e) {
                        var t = "",
                            i = "",
                            s = "";
                        return (
                            !e.selectedOpt ||
                            this.foundSelected ||
                            this.hasDefaultPlaceholder ||
                            ((i += "cs-selected "), (this.foundSelected = !0)),
                            e.getAttribute("data-class") && (i += e.getAttribute("data-class")),
                            e.getAttribute("data-link") && (s = "data-link=" + e.getAttribute("data-link")),
                            "" !== i && (t = 'class="' + i + '" '),
                            "<li " +
                            t +
                            s +
                            ' data-option data-value="' +
                            e.value +
                            '"><span>' +
                            e.textContent +
                            "</span></li>"
                        );
                    };
                [].slice.call(this.el.children).forEach(function (i) {
                    if (!i.disabled) {
                        var s = i.tagName.toLowerCase();
                        "option" === s
                            ? (e += t(i))
                            : "optgroup" === s &&
                            ((e += '<li class="cs-optgroup"><span>' + i.label + "</span><ul>"),
                                [].slice.call(i.children).forEach(function (i) {
                                    e += t(i);
                                }),
                                (e += "</ul></li>"));
                    }
                });
                var i = '<div class="cs-options"><ul>' + e + "</ul></div>";
                (this.selEl = document.createElement("div")),
                    (this.selEl.className = this.el.className),
                    (this.selEl.tabIndex = this.el.tabIndex),
                    (this.selEl.innerHTML =
                        '<span class="cs-placeholder">' + this.selectedOpt.textContent + "</span>" + i),
                    this.el.parentNode.appendChild(this.selEl),
                    this.selEl.appendChild(this.el);
                var s = document.createElement("div");
                (s.className = "cs-backdrop"), this.selEl.appendChild(s);
            }),
            (i.prototype._initEvents = function () {
                var e = this;
                this.selPlaceholder.addEventListener("click", function () {
                    e._toggleSelect();
                }),
                    this.selOpts.forEach(function (t, i) {
                        t.addEventListener("click", function () {
                            (e.current = i), e._changeOption(), e._toggleSelect();
                        });
                    }),
                    document.addEventListener("click", function (t) {
                        var i = t.target;
                        e._isOpen() &&
                            i !== e.selEl &&
                            !(function (e, t) {
                                if (!e) return !1;
                                for (var i = e.target || e.srcElement || e || !1; i && i != t;)
                                    i = i.parentNode || !1;
                                return !1 !== i;
                            })(i, e.selEl) &&
                            e._toggleSelect();
                    }),
                    this.selEl.addEventListener("keydown", function (t) {
                        switch (t.keyCode || t.which) {
                            case 38:
                                t.preventDefault(), e._navigateOpts("prev");
                                break;
                            case 40:
                                t.preventDefault(), e._navigateOpts("next");
                                break;
                            case 32:
                                t.preventDefault(),
                                    e._isOpen() &&
                                    void 0 !== e.preSelCurrent &&
                                    -1 !== e.preSelCurrent &&
                                    e._changeOption(),
                                    e._toggleSelect();
                                break;
                            case 13:
                                t.preventDefault(),
                                    e._isOpen() &&
                                    void 0 !== e.preSelCurrent &&
                                    -1 !== e.preSelCurrent &&
                                    (e._changeOption(), e._toggleSelect());
                                break;
                            case 27:
                                t.preventDefault(), e._isOpen() && e._toggleSelect();
                        }
                    });
            }),
            (i.prototype._navigateOpts = function (e) {
                this._isOpen() || this._toggleSelect();
                var t =
                    void 0 !== this.preSelCurrent && -1 !== this.preSelCurrent
                        ? this.preSelCurrent
                        : this.current;
                (("prev" === e && t > 0) || ("next" === e && t < this.selOptsCount - 1)) &&
                    ((this.preSelCurrent = "next" === e ? t + 1 : t - 1),
                        this._removeFocus(),
                        classie.add(this.selOpts[this.preSelCurrent], "cs-focus"));
            }),
            (i.prototype._toggleSelect = function () {
                var t,
                    i = this.selEl.querySelector(".cs-backdrop"),
                    n = document.querySelector(this.options.container),
                    o = n.querySelector(".dropdown-mask"),
                    a = this.selEl.querySelector(".cs-options"),
                    r = this.selEl.querySelector(".cs-placeholder"),
                    l = r.offsetWidth,
                    c = r.offsetHeight,
                    d = a.scrollWidth;
                if (this._isOpen()) {
                    -1 !== this.current &&
                        (this.selPlaceholder.textContent = this.selOpts[this.current].textContent);
                    var p = (u = this.selEl.data).parentNode;
                    s(this.selEl, u),
                        this.selEl.removeAttribute("style"),
                        p.removeChild(u),
                        this.selEl.clientHeight,
                        (i.style.transform =
                            i.style.webkitTransform =
                            i.style.MozTransform =
                            i.style.msTransform =
                            i.style.OTransform =
                            "scale3d(1,1,1)"),
                        classie.remove(this.selEl, "cs-active"),
                        (o.style.display = "none"),
                        (a.style.overflowY = "hidden"),
                        (a.style.width = "auto");
                    var h = (function (e, t) {
                        for (
                            var i =
                                e.matches ||
                                e.webkitMatchesSelector ||
                                e.mozMatchesSelector ||
                                e.msMatchesSelector;
                            e;

                        ) {
                            if (i.bind(e)(t)) return e;
                            e = e.parentElement;
                        }
                        return !1;
                    })(this.selEl, ".form-group");
                    h && classie.removeClass(h, "focused");
                } else {
                    var u;
                    this.hasDefaultPlaceholder &&
                        this.options.stickyPlaceholder &&
                        (this.selPlaceholder.textContent = this.selectedOpt.textContent),
                        this.selEl.parentNode.querySelector(".dropdown-placeholder")
                            ? (u = this.selEl.parentNode.querySelector(".dropdown-placeholder"))
                            : ((u = document.createElement("div")),
                                classie.add(u, "dropdown-placeholder"),
                                s(u, this.selEl)),
                        (u.style.height = c + "px"),
                        (u.style.width = this.selEl.offsetWidth + "px"),
                        (this.selEl.data = u),
                        (this.selEl.style.position = "absolute");
                    var f = {
                        left:
                            (t = this.selEl).getBoundingClientRect().left +
                            e.pageXOffset -
                            t.ownerDocument.documentElement.clientLeft,
                        top:
                            t.getBoundingClientRect().top +
                            e.pageYOffset -
                            t.ownerDocument.documentElement.clientTop,
                    };
                    (this.selEl.style.left = f.left + "px"),
                        (this.selEl.style.top = f.top + "px"),
                        n.appendChild(this.selEl);
                    var g = a.offsetHeight,
                        v = r.offsetHeight,
                        m = (a.offsetWidth, r.offsetWidth, g / v);
                    (i.style.transform =
                        i.style.webkitTransform =
                        i.style.MozTransform =
                        i.style.msTransform =
                        i.style.OTransform =
                        "scale3d(1, " + m + ", 1)"),
                        o ||
                        ((o = document.createElement("div")),
                            classie.add(o, "dropdown-mask"),
                            n.appendChild(o)),
                        (o.style.display = "block"),
                        classie.add(this.selEl, "cs-active");
                    var b = l < d ? d : l;
                    (this.selEl.style.width = b + "px"),
                        (this.selEl.style.height = v + "px"),
                        (a.style.width = "100%"),
                        setTimeout(function () {
                            a.style.overflowY = "auto";
                        }, 300);
                }
            }),
            (i.prototype._changeOption = function () {
                void 0 !== this.preSelCurrent &&
                    -1 !== this.preSelCurrent &&
                    ((this.current = this.preSelCurrent), (this.preSelCurrent = -1));
                var t = this.selOpts[this.current];
                (this.selPlaceholder.textContent = t.textContent),
                    (this.el.value = t.getAttribute("data-value"));
                var i = this.selEl.querySelector("li.cs-selected");
                i && classie.remove(i, "cs-selected"),
                    classie.add(t, "cs-selected"),
                    t.getAttribute("data-link") &&
                    (this.options.newTab
                        ? e.open(t.getAttribute("data-link"), "_blank")
                        : (e.location = t.getAttribute("data-link"))),
                    this.options.onChange(this.el);
            }),
            (i.prototype._isOpen = function (e) {
                return classie.has(this.selEl, "cs-active");
            }),
            (i.prototype._removeFocus = function (e) {
                var t = this.selEl.querySelector("li.cs-focus");
                t && classie.remove(t, "cs-focus");
            }),
            (e.SelectFx = i);
    })(window),
    (function (e) {
        "use strict";
        e("[data-chat-input]").on("keypress", function (t) {
            if (13 == t.which) {
                var i = e(this).attr("data-chat-conversation");
                e(i).append(
                    '<div class="message clearfix"><div class="chat-bubble from-me">' +
                    e(this).val() +
                    "</div></div>"
                ),
                    e(this).val("");
            }
        });
    })(window.jQuery),
    (function (e) {
        "use strict";
        function t(e) {
            return parseInt((e / 100) * 360);
        }
        var i = function (i, s) {
            (this.$element = e(i)),
                (this.options = e.extend(!0, {}, e.fn.circularProgress.defaults, s)),
                (this.$container = e('<div class="progress-circle"></div>')),
                this.$element.attr("data-color") &&
                this.$container.addClass("progress-circle-" + this.$element.attr("data-color")),
                this.$element.attr("data-thick") && this.$container.addClass("progress-circle-thick"),
                (this.$pie = e('<div class="pie"></div>')),
                (this.$pie.$left = e('<div class="left-side half-circle"></div>')),
                (this.$pie.$right = e('<div class="right-side half-circle"></div>')),
                this.$pie.append(this.$pie.$left).append(this.$pie.$right),
                this.$container.append(this.$pie).append('<div class="shadow"></div>'),
                this.$element.after(this.$container),
                (this.val = this.$element.val());
            var n = t(this.val);
            this.val <= 50
                ? this.$pie.$right.css("transform", "rotate(" + n + "deg)")
                : (this.$pie.css("clip", "rect(auto, auto, auto, auto)"),
                    this.$pie.$right.css("transform", "rotate(180deg)"),
                    this.$pie.$left.css("transform", "rotate(" + n + "deg)"));
        };
        (i.VERSION = "1.0.0"),
            (i.prototype.value = function (e) {
                if (void 0 !== e) {
                    var i = t(e);
                    this.$pie.removeAttr("style"),
                        this.$pie.$right.removeAttr("style"),
                        this.$pie.$left.removeAttr("style"),
                        e <= 50
                            ? this.$pie.$right.css("transform", "rotate(" + i + "deg)")
                            : (this.$pie.css("clip", "rect(auto, auto, auto, auto)"),
                                this.$pie.$right.css("transform", "rotate(180deg)"),
                                this.$pie.$left.css("transform", "rotate(" + i + "deg)"));
                }
            });
        var s = e.fn.circularProgress;
        (e.fn.circularProgress = function (t) {
            return this.filter(":input").each(function () {
                var s = e(this),
                    n = s.data("pg.circularProgress"),
                    o = "object" == typeof t && t;
                n || s.data("pg.circularProgress", (n = new i(this, o))),
                    "string" == typeof t ? n[t]() : o.hasOwnProperty("value") && n.value(o.value);
            });
        }),
            (e.fn.circularProgress.Constructor = i),
            (e.fn.circularProgress.defaults = { value: 0 }),
            (e.fn.circularProgress.noConflict = function () {
                return (e.fn.circularProgress = s), this;
            }),
            e(window).on("load", function () {
                e('[data-pages-progress="circle"]').each(function () {
                    var t = e(this);
                    t.circularProgress(t.data());
                });
            });
    })(window.jQuery),
    (function (e) {
        "use strict";
        var t = function (t, i) {
            function s() {
                var e = n.container.position(),
                    t = n.container.height(),
                    i = n.container.width(),
                    s = e.top,
                    o = n.container.parent().height() - (s + t),
                    a = e.left,
                    r = n.container.parent().width() - (a + i);
                /top/.test(n.options.position) && n.wrapper.css("top", s),
                    /bottom/.test(n.options.position) && n.wrapper.css("bottom", o),
                    /left/.test(n.options.position) && n.wrapper.css("left", a),
                    /right/.test(n.options.position) && n.wrapper.css("right", r);
            }
            var n = this;
            return (
                (n.container = e(t)),
                (n.notification = e('<div class="pgn push-on-sidebar-open"></div>')),
                (n.options = e.extend(!0, {}, e.fn.pgNotification.defaults, i)),
                n.container.find(".pgn-wrapper[data-position=" + this.options.position + "]").length
                    ? (n.wrapper = e(".pgn-wrapper[data-position=" + this.options.position + "]"))
                    : ((n.wrapper = e(
                        '<div class="pgn-wrapper" data-position="' + this.options.position + '"></div>'
                    )),
                        n.container.append(n.wrapper)),
                (n.alert = e('<div class="alert"></div>')),
                n.alert.addClass("alert-" + n.options.type),
                "bar" == n.options.style
                    ? new (function () {
                        n.notification.addClass("pgn-bar"), n.alert.addClass("alert-" + n.options.type);
                        var t = e('<div class="container"/>');
                        if ((t.append("<span>" + n.options.message + "</span>"), n.options.showClose)) {
                            var i = e('<button type="button" class="close" data-dismiss="alert"></button>')
                                .append('<span aria-hidden="true">&times;</span>')
                                .append('<span class="sr-only">Close</span>');
                            t.append(i);
                        }
                        n.alert.append(t);
                    })()
                    : "flip" == n.options.style
                        ? new (function () {
                            if (
                                (n.notification.addClass("pgn-flip"),
                                    n.alert.append("<span>" + n.options.message + "</span>"),
                                    n.options.showClose)
                            ) {
                                var t = e('<button type="button" class="close" data-dismiss="alert"></button>')
                                    .append('<span aria-hidden="true">&times;</span>')
                                    .append('<span class="sr-only">Close</span>');
                                n.alert.prepend(t);
                            }
                        })()
                        : "circle" == n.options.style
                            ? new (function () {
                                n.notification.addClass("pgn-circle");
                                var e = "<div>";
                                n.options.thumbnail &&
                                    (e +=
                                        '<div class="pgn-thumbnail"><div>' + n.options.thumbnail + "</div></div>"),
                                    (e += '<div class="pgn-message"><div>'),
                                    n.options.title && (e += '<p class="bold">' + n.options.title + "</p>"),
                                    (e += "<p>" + n.options.message + "</p></div></div>"),
                                    (e += "</div>"),
                                    n.options.showClose &&
                                    ((e += '<button type="button" class="close" data-dismiss="alert">'),
                                        (e +=
                                            '<span aria-hidden="true">&times;</span><span class="sr-only">Close</span>'),
                                        (e += "</button>")),
                                    n.alert.append(e),
                                    n.alert.after('<div class="clearfix"></div>');
                            })()
                            : (n.options.style,
                                new (function () {
                                    if (
                                        (n.notification.addClass("pgn-simple"),
                                            n.alert.append(n.options.message),
                                            n.options.showClose)
                                    ) {
                                        var t = e('<button type="button" class="close" data-dismiss="alert"></button>')
                                            .append('<span aria-hidden="true">&times;</span>')
                                            .append('<span class="sr-only">Close</span>');
                                        n.alert.prepend(t);
                                    }
                                })()),
                n.notification.append(n.alert),
                e("body").hasClass("horizontal-menu") && (s(), e(window).on("resize", s)),
                n.alert.on("closed.bs.alert", function () {
                    n.notification.remove(), n.options.onClosed();
                }),
                this
            );
        };
        (t.VERSION = "1.0.0"),
            (t.prototype.show = function () {
                if (
                    (this.wrapper.prepend(this.notification),
                        this.options.onShown(),
                        0 != this.options.timeout)
                ) {
                    var t = this;
                    setTimeout(
                        function () {
                            this.notification.fadeOut("slow", function () {
                                e(this).remove(), t.options.onClosed();
                            });
                        }.bind(this),
                        this.options.timeout
                    );
                }
            }),
            (e.fn.pgNotification = function (e) {
                return new t(this, e);
            }),
            (e.fn.pgNotification.defaults = {
                style: "simple",
                message: null,
                position: "top-right",
                type: "info",
                showClose: !0,
                timeout: 4e3,
                onShown: function () { },
                onClosed: function () { },
            });
    })(window.jQuery),
    (function (e) {
        "use strict";
        var t = function (t, i) {
            (this.$element = e(t)),
                (this.options = e.extend(!0, {}, e.fn.card.defaults, i)),
                (this.$loader = null),
                (this.$body = this.$element.find(".card-block"));
        };
        (t.VERSION = "1.0.0"),
            (t.prototype.collapse = function () {
                var t = this.$element.find(this.options.collapseButton + " > i");
                if (
                    (this.$element.find(".card-header"),
                        this.$body.stop().slideToggle("fast"),
                        this.$element.hasClass("card-collapsed"))
                )
                    return (
                        this.$element.removeClass("card-collapsed"),
                        t.removeClass().addClass("pg-arrow_maximize"),
                        void (e.isFunction(this.options.onExpand) && this.options.onExpand(this))
                    );
                this.$element.addClass("card-collapsed"),
                    t.removeClass().addClass("pg-arrow_minimize"),
                    e.isFunction(this.options.onCollapse) && this.options.onCollapse(this);
            }),
            (t.prototype.close = function () {
                this.$element.remove(), e.isFunction(this.options.onClose) && this.options.onClose(this);
            }),
            (t.prototype.maximize = function () {
                var t = this.$element.find(this.options.maximizeButton + " > i");
                if (this.$element.hasClass("card-maximized"))
                    this.$element.removeClass("card-maximized"),
                        this.$element.attr("style", ""),
                        t.removeClass("pg-fullscreen_restore").addClass("pg-fullscreen"),
                        e.isFunction(this.options.onRestore) && this.options.onRestore(this);
                else {
                    var i = e('[data-pages="sidebar"]'),
                        s = e(".header"),
                        n = 0;
                    i && (n = i.position().left + i.width());
                    var o = s.height();
                    this.$element.addClass("card-maximized"),
                        this.$element.css("left", n),
                        this.$element.css("top", o),
                        t.removeClass("pg-fullscreen").addClass("pg-fullscreen_restore"),
                        e.isFunction(this.options.onMaximize) && this.options.onMaximize(this);
                }
            }),
            (t.prototype.refresh = function (t) {
                var i = this.$element.find(this.options.refreshButton);
                if (t) {
                    if (this.$loader && this.$loader.is(":visible")) return;
                    if (!e.isFunction(this.options.onRefresh)) return;
                    (this.$loader = e('<div class="card-progress"></div>')),
                        this.$loader.css({
                            "background-color":
                                "rgba(" + this.options.overlayColor + "," + this.options.overlayOpacity + ")",
                        });
                    var s = "";
                    if ("circle" == this.options.progress)
                        s +=
                            '<div class="progress-circle-indeterminate progress-circle-' +
                            this.options.progressColor +
                            '"></div>';
                    else if ("bar" == this.options.progress)
                        (s += '<div class="progress progress-small">'),
                            (s +=
                                '    <div class="progress-bar-indeterminate progress-bar-' +
                                this.options.progressColor +
                                '"></div>'),
                            (s += "</div>");
                    else if ("circle-lg" == this.options.progress) {
                        i.addClass("refreshing");
                        var n,
                            o = i.find("> i").first();
                        i.find('[class$="-animated"]').length
                            ? (n = i.find('[class$="-animated"]'))
                            : ((n = e("<i/>")).css({
                                position: "absolute",
                                top: o.position().top,
                                left: o.position().left,
                            }),
                                n.addClass("card-icon-refresh-lg-" + this.options.progressColor + "-animated"),
                                i.append(n)),
                            o.addClass("fade"),
                            n.addClass("active");
                    } else
                        (s += '<div class="progress progress-small">'),
                            (s +=
                                '    <div class="progress-bar-indeterminate progress-bar-' +
                                this.options.progressColor +
                                '"></div>'),
                            (s += "</div>");
                    this.$loader.append(s), this.$element.append(this.$loader);
                    var a = this.$loader;
                    setTimeout(
                        function () {
                            this.$loader.remove(), this.$element.append(a);
                        }.bind(this),
                        300
                    ),
                        this.$loader.fadeIn(),
                        e.isFunction(this.options.onRefresh) && this.options.onRefresh(this);
                } else {
                    var r = this;
                    this.$loader.fadeOut(function () {
                        if ((e(this).remove(), "circle-lg" == r.options.progress)) {
                            var t = i.find(".active"),
                                s = i.find(".fade");
                            t.removeClass("active"), s.removeClass("fade"), i.removeClass("refreshing");
                        }
                        r.options.refresh = !1;
                    });
                }
            }),
            (t.prototype.error = function (e) {
                if (e) {
                    var t = this;
                    this.$element
                        .pgNotification({
                            style: "bar",
                            message: e,
                            position: "top",
                            timeout: 0,
                            type: "danger",
                            onShown: function () {
                                t.$loader.find("> div").fadeOut();
                            },
                            onClosed: function () {
                                t.refresh(!1);
                            },
                        })
                        .show();
                }
            });
        var i = e.fn.card;
        (e.fn.card = function (i) {
            return this.each(function () {
                var s = e(this),
                    n = s.data("pg.card"),
                    o = "object" == typeof i && i;
                n || s.data("pg.card", (n = new t(this, o))),
                    "string" == typeof i
                        ? n[i]()
                        : o.hasOwnProperty("refresh")
                            ? n.refresh(o.refresh)
                            : o.hasOwnProperty("error") && n.error(o.error);
            });
        }),
            (e.fn.card.Constructor = t),
            (e.fn.card.defaults = {
                progress: "circle",
                progressColor: "master",
                refresh: !1,
                error: null,
                overlayColor: "255,255,255",
                overlayOpacity: 0.8,
                refreshButton: '[data-toggle="refresh"]',
                maximizeButton: '[data-toggle="maximize"]',
                collapseButton: '[data-toggle="collapse"]',
                closeButton: '[data-toggle="close"]',
            }),
            (e.fn.card.noConflict = function () {
                return (e.fn.card = i), this;
            }),
            e(document).on("click.pg.card.data-api", '[data-toggle="collapse"]', function (t) {
                var i = e(this),
                    s = i.closest(".card");
                i.is("a") && t.preventDefault(), s.data("pg.card") && s.card("collapse");
            }),
            e(document).on("click.pg.card.data-api", '[data-toggle="close"]', function (t) {
                var i = e(this),
                    s = i.closest(".card");
                i.is("a") && t.preventDefault(), s.data("pg.card") && s.card("close");
            }),
            e(document).on("click.pg.card.data-api", '[data-toggle="refresh"]', function (t) {
                var i = e(this),
                    s = i.closest(".card");
                i.is("a") && t.preventDefault(), s.data("pg.card") && s.card({ refresh: !0 });
            }),
            e(document).on("click.pg.card.data-api", '[data-toggle="maximize"]', function (t) {
                var i = e(this),
                    s = i.closest(".card");
                i.is("a") && t.preventDefault(), s.data("pg.card") && s.card("maximize");
            }),
            e(window).on("load", function () {
                e('[data-pages="card"]').each(function () {
                    var t = e(this);
                    t.card(t.data());
                });
            });
    })(window.jQuery),
    (function (e) {
        "use strict";
        var t = function (t, i) {
            var s = this;
            return (
                (s.options = e.extend(!0, {}, e.fn.pgMobileViews.defaults, i)),
                (s.element = e(t)),
                s.element.on("click", function (t) {
                    t.preventDefault();
                    var i = s.element.data(),
                        n = e(i.viewPort),
                        o = i.toggleView;
                    return (
                        null != i.toggleView
                            ? (n.children().last().children(".view").hide(), e(i.toggleView).show())
                            : (o = n.last()),
                        n.toggleClass(i.viewAnimation),
                        s.options.onNavigate(o, i.viewAnimation),
                        !1
                    );
                }),
                this
            );
        };
        (e.fn.pgMobileViews = function (e) {
            return new t(this, e);
        }),
            (e.fn.pgMobileViews.defaults = { onNavigate: function (e, t) { } }),
            e(window).on("load", function () {
                e('[data-navigate="view"]').each(function () {
                    e(this).pgMobileViews();
                });
            });
    })(window.jQuery),
    (function (e) {
        "use strict";
        var t = function (t, i) {
            (this.$element = e(t)),
                (this.options = e.extend(!0, {}, e.fn.quickview.defaults, i)),
                (this.bezierEasing = [0.05, 0.74, 0.27, 0.99]);
            var s = this;
            e(this.options.notes).on("click", ".list > ul > li", function (t) {
                var i = e(this).find(".note-preview");
                i = e(this).find(".note-preview");
                e(s.options.noteEditor).html(i.html()), e(s.options.notes).toggleClass("push");
            }),
                e(this.options.notes).on("click", ".list > ul > li .checkbox", function (e) {
                    e.stopPropagation();
                }),
                e(this.options.notes).on("click", s.options.backButton, function (t) {
                    e(s.options.notes).find(".toolbar > li > a").removeClass("active"),
                        e(s.options.notes).toggleClass("push");
                }),
                e(this.options.deleteNoteButton).click(function (t) {
                    t.preventDefault(),
                        e(this).toggleClass("selected"),
                        e(s.options.notes).find(".list > ul > li .checkbox").fadeToggle("fast"),
                        e(s.options.deleteNoteConfirmButton).fadeToggle("fast").removeClass("hide");
                }),
                e(this.options.newNoteButton).click(function (t) {
                    t.preventDefault(), e(s.options.noteEditor).html("");
                }),
                e(this.options.deleteNoteConfirmButton).click(function () {
                    e(s.options.notes)
                        .find("input[type=checkbox]:checked")
                        .each(function () {
                            e(this).parents("li").remove();
                        });
                }),
                e(this.options.notes).on("click", ".toolbar > li > a", function (t) {
                    var i = e(this).attr("data-action");
                    document.execCommand(i, !1, null), e(this).toggleClass("active");
                });
        };
        t.VERSION = "1.0.0";
        var i = e.fn.quickview;
        (e.fn.quickview = function (i) {
            return this.each(function () {
                var s = e(this),
                    n = s.data("pg.quickview"),
                    o = "object" == typeof i && i;
                n || s.data("pg.quickview", (n = new t(this, o))), "string" == typeof i && n[i]();
            });
        }),
            (e.fn.quickview.Constructor = t),
            (e.fn.quickview.defaults = {
                notes: "#note-views",
                alerts: "#alerts",
                chat: "#chat",
                notesList: ".list",
                noteEditor: ".quick-note-editor",
                deleteNoteButton: ".delete-note-link",
                deleteNoteConfirmButton: ".btn-remove-notes",
                newNoteButton: ".new-note-link",
                backButton: ".close-note-link",
            }),
            (e.fn.quickview.noConflict = function () {
                return (e.fn.quickview = i), this;
            }),
            e(window).on("load", function () {
                e('[data-pages="quickview"]').each(function () {
                    var t = e(this);
                    t.quickview(t.data());
                });
            }),
            e(document).on(
                "click.pg.quickview.data-api touchstart",
                '[data-toggle="quickview"]',
                function (t) {
                    var i = e(this).attr("data-toggle-element");
                    e(i).toggleClass("open"), t.preventDefault();
                }
            );
    })(window.jQuery),
    (function (e) {
        "use strict";
        var t = function (t, i) {
            if (
                ((this.$element = e(t)),
                    (this.options = e.extend(!0, {}, e.fn.parallax.defaults, i)),
                    (this.$coverPhoto = this.$element.find(".cover-photo")),
                    (this.$content = this.$element.find(".inner")),
                    this.$coverPhoto.find("> img").length)
            ) {
                var s = this.$coverPhoto.find("> img");
                this.$coverPhoto.css("background-image", "url(" + s.attr("src") + ")"), s.remove();
            }
        };
        (t.VERSION = "1.0.0"),
            (t.prototype.animate = function () {
                var t,
                    i = (50 * this.$element.height()) / 100;
                (t = e(this.options.scrollElement).scrollTop()),
                    this.$coverPhoto.css({
                        transform: "translateY(" + t * this.options.speed.coverPhoto + "px)",
                    }),
                    this.$content.css({ transform: "translateY(" + t * this.options.speed.content + "px)" }),
                    t > i ? this.$content.css({ opacity: 1 - t / 1200 }) : this.$content.css({ opacity: 1 });
            });
        var i = e.fn.parallax;
        (e.fn.parallax = function (i) {
            return this.each(function () {
                var s = e(this),
                    n = s.data("pg.parallax"),
                    o = "object" == typeof i && i;
                n || s.data("pg.parallax", (n = new t(this, o))), "string" == typeof i && n[i]();
            });
        }),
            (e.fn.parallax.Constructor = t),
            (e.fn.parallax.defaults = { speed: { coverPhoto: 0.3, content: 0.17 }, scrollElement: window }),
            (e.fn.parallax.noConflict = function () {
                return (e.fn.parallax = i), this;
            }),
            e(window).on("load", function () {
                e('[data-pages="parallax"]').each(function () {
                    var t = e(this);
                    t.parallax(t.data());
                });
            }),
            e(window).on("scroll", function () {
                Modernizr.touch || e('[data-pages="parallax"]').parallax("animate");
            });
    })(window.jQuery),
    (function (e) {
        "use strict";
        var t = function (t, i) {
            function s() {
                e(window).width() < 1200
                    ? e("body").hasClass("menu-pin") &&
                    (e("body").removeClass("menu-pin"), e("body").addClass("menu-unpinned"))
                    : e("body").hasClass("menu-unpinned") && e("body").addClass("menu-pin");
            }
            if (
                ((this.$element = e(t)),
                    (this.$body = e("body")),
                    (this.options = e.extend(!0, {}, e.fn.sidebar.defaults, i)),
                    (this.bezierEasing = [0.05, 0.74, 0.27, 0.99]),
                    (this.cssAnimation = !0),
                    (this.css3d = !0),
                    (this.sideBarWidth = 280),
                    (this.sideBarWidthCondensed = 210),
                    (this.$sidebarMenu = this.$element.find(".sidebar-menu > ul")),
                    (this.$pageContainer = e(this.options.pageContainer)),
                    this.$sidebarMenu.length)
            ) {
                "desktop" == e.Pages.getUserAgent() &&
                    this.$sidebarMenu.scrollbar({
                        ignoreOverlay: !1,
                        disableBodyScroll: 1 == this.$element.data("disableBodyScroll"),
                    }),
                    Modernizr.csstransitions || (this.cssAnimation = !1),
                    Modernizr.csstransforms3d || (this.css3d = !1),
                    "undefined" == typeof angular &&
                    e(document).on("click", ".sidebar-menu a", function (t) {
                        if (!1 !== e(this).parent().children(".sub-menu")) {
                            var i = e(this),
                                s = e(this).parent().parent(),
                                n = e(this).parent(),
                                o = e(this).parent().children(".sub-menu");
                            n.hasClass("open active")
                                ? (i.children(".arrow").removeClass("open active"),
                                    o.slideUp(200, function () {
                                        n.removeClass("open active");
                                    }))
                                : (s.children("li.open").children(".sub-menu").slideUp(200),
                                    s
                                        .children("li.open")
                                        .children("a")
                                        .children(".arrow")
                                        .removeClass("open active"),
                                    s.children("li.open").removeClass("open active"),
                                    i.children(".arrow").addClass("open active"),
                                    o.slideDown(200, function () {
                                        n.addClass("open active");
                                    }));
                        }
                    }),
                    e(".sidebar-slide-toggle").on("click touchend", function (t) {
                        t.preventDefault(), e(this).toggleClass("active");
                        var i = e(this).attr("data-pages-toggle");
                        null != i && e(i).toggleClass("show");
                    });
            }
        };

        (t.prototype.toggleSidebar = function (t) {
            var i,
                s = e("body").css("background-color");
            e(".page-container").css("background-color", s),
                this.$body.hasClass("sidebar-open")
                    ? (this.$body.removeClass("sidebar-open"),
                        (i = setTimeout(
                            function () {
                                this.$element.removeClass("visible");
                                if ($(".sidebar-menu .open.active").length > 0) {
                                    $(".sidebar-menu .open.active a").parent().children('.sub-menu').fadeOut();
                                    $(".sidebar-menu .open.active").removeClass("open active");
                                }
                            }.bind(this),
                            10
                        )))
                    : (clearTimeout(i),
                        this.$element.addClass("visible"),
                        setTimeout(
                            function () {
                                this.$body.addClass("sidebar-open");
                            }.bind(this),
                            10
                        ),
                        setTimeout(function () {
                            e(".page-container").css({ "background-color": "" });
                        }, 1e3));
        }),
            (t.prototype.togglePinSidebar = function (e) {
                "hide" == e
                    ? this.$body.removeClass("menu-pin")
                    : "show" == e
                        ? this.$body.addClass("menu-pin")
                        : this.$body.toggleClass("menu-pin");
            });
        var i = e.fn.sidebar;
        (e.fn.sidebar = function (i) {
            return this.each(function () {
                var s = e(this),
                    n = s.data("pg.sidebar"),
                    o = "object" == typeof i && i;
                n || s.data("pg.sidebar", (n = new t(this, o))), "string" == typeof i && n[i]();
            });
        }),
            (e.fn.sidebar.Constructor = t),
            (e.fn.sidebar.defaults = { pageContainer: ".page-container" }),
            (e.fn.sidebar.noConflict = function () {
                return (e.fn.sidebar = i), this;
            }),
            e(document).on("click.pg.sidebar.data-api", '[data-toggle-pin="sidebar"]', function (t) {
                return e(this), e('[data-pages="sidebar"]').data("pg.sidebar").togglePinSidebar(), !1;
            }),
            e(document).on("click", '[data-toggle="sidebar"]', function (t) {
                // if(e(this).parents('body').find('.menu-items .menu_active.open.active').length > 0){
                //     e(this).parents('body').find('.menu-items .menu_active.open.active').trigger("click");
                // }

                return e(this), e('[data-pages="sidebar"]').data("pg.sidebar").toggleSidebar(), !1;
            });
    })(window.jQuery),
    (function (e) {
        "use strict";
        var t = function (t, i) {
            (this.$element = e(t)), (this.options = e.extend(!0, {}, e.fn.search.defaults, i)), this.init();
        };
        (t.VERSION = "1.0.0"),
            (t.prototype.init = function () {
                var t = this;
                (this.pressedKeys = []),
                    (this.ignoredKeys = []),
                    (this.$searchField = this.$element.find(this.options.searchField)),
                    (this.$closeButton = this.$element.find(this.options.closeButton)),
                    (this.$suggestions = this.$element.find(this.options.suggestions)),
                    (this.$brand = this.$element.find(this.options.brand)),
                    this.$searchField.on("keyup", function (i) {
                        t.$suggestions && t.$suggestions.html(e(this).val());
                    }),
                    this.$searchField.on("keyup", function (i) {
                        if (
                            (t.options.onKeyEnter && t.options.onKeyEnter(t.$searchField.val()),
                                13 == i.keyCode &&
                                (i.preventDefault(),
                                    t.options.onSearchSubmit && t.options.onSearchSubmit(t.$searchField.val())),
                                e("body").hasClass("overlay-disabled"))
                        )
                            return 0;
                    }),
                    this.$closeButton.on("click", function () {
                        t.toggleOverlay("hide");
                    }),
                    this.$element.on("click", function (i) {
                        "search" == e(i.target).data("pages") && t.toggleOverlay("hide");
                    }),
                    e(document).on("keypress.pg.search", function (e) {
                        t.keypress(e);
                    }),
                    e(document).on("keyup", function (e) {
                        t.$element.is(":visible") && 27 == e.keyCode && t.toggleOverlay("hide");
                    });
            }),
            (t.prototype.keypress = function (t) {
                var i = (t = t || event).target.nodeName;
                e("body").hasClass("overlay-disabled") ||
                    e(t.target).hasClass("js-input") ||
                    "INPUT" == i ||
                    "TEXTAREA" == i ||
                    0 === t.which ||
                    0 === t.charCode ||
                    t.ctrlKey ||
                    t.metaKey ||
                    t.altKey ||
                    27 == t.keyCode ||
                    this.toggleOverlay("show", String.fromCharCode(t.keyCode | t.charCode));
            }),
            (t.prototype.toggleOverlay = function (t, i) {
                var s = this;
                "show" == t
                    ? (this.$element.removeClass("hide"),
                        this.$element.fadeIn("fast"),
                        this.$searchField.is(":focus") ||
                        (this.$searchField.val(i),
                            setTimeout(
                                function () {
                                    this.$searchField.focus();
                                    var e = this.$searchField.val();
                                    this.$searchField.val(""), this.$searchField.val(e);
                                }.bind(this),
                                10
                            )),
                        this.$element.removeClass("closed"),
                        this.$brand.toggleClass("invisible"),
                        e(document).off("keypress.pg.search"))
                    : (this.$element.fadeOut("fast").addClass("closed"),
                        this.$searchField.val("").blur(),
                        setTimeout(
                            function () {
                                this.$element.is(":visible") && this.$brand.toggleClass("invisible"),
                                    e(document).on("keypress.pg.search", function (e) {
                                        s.keypress(e);
                                    });
                            }.bind(this),
                            10
                        ));
            });
        var i = e.fn.search;
        (e.fn.search = function (i) {
            return this.each(function () {
                var s = e(this),
                    n = s.data("pg.search"),
                    o = "object" == typeof i && i;
                n || s.data("pg.search", (n = new t(this, o))), "string" == typeof i && n[i]();
            });
        }),
            (e.fn.search.Constructor = t),
            (e.fn.search.defaults = {
                searchField: '[data-search="searchField"]',
                closeButton: '[data-search="closeButton"]',
                suggestions: '[data-search="suggestions"]',
                brand: '[data-search="brand"]',
            }),
            (e.fn.search.noConflict = function () {
                return (e.fn.search = i), this;
            }),
            e(document).on("click.pg.search.data-api", '[data-toggle="search"]', function (t) {
                var i = e(this),
                    s = e('[data-pages="search"]');
                i.is("a") && t.preventDefault(), s.data("pg.search").toggleOverlay("show");
            });
    })(window.jQuery),
    (function (e) {
        "use strict";
        "undefined" == typeof angular && e.Pages.init();
    })(window.jQuery);

